import React from 'react';
import './include/css/bootstrap.min.css';
import './include/css/app.css';

class App extends React.Component{
  constructor(props){
    super(props);
    this.initialState = {
      model : {
        rentYRG: 0,
        appreciationYRG: 1,
        insuranceYRG: 0,
        repairsYRG: 0,
        waterYRG: 0,
        sewerYRG: 0,
        miscYRG: 0,
        propertyTaxYRG: 0,
        unitsPerMonth: {

        },
        expenses: {
          insurance: {
            amount: 55,
            yrg: 1
          },
          repairs: {
            amount: 12,
            yrg: 1
          },
          water: {
            amount: 22,
            yrg: 1
          },
          sewer: {
            amount: 0,
            yrg: 0
          },
          propertyTax: {
            amount: 0,
            yrg: 0
          },
          misc: {
            amount: 0,
            yrg: 0
          }
        },
        vaccancyPct: 5,
        downPaymentPct: 20,
        interestRatePct: 3,
        loanLengthYears: 30,
        loanStartingDate: null,
        valueOfLand: 0,
        propertyManagerPercentageOfGrossRent: 5,
        incomeTaxRate: 0,
        yearsOutComputation: 30,
        initialFixedCost: 0,
        closingCostsPct: 0
      },

      view: {
        unitRows: []
      },
      computed: {
        grm: null,
        cap: null,
        downPaymentAmount: null,
        loanValue: null,
        loanEndingDate: null,
        closingCosts: null,
        monthlyAmortizationArrays: {
          loanPaymentPerMonth: {
            allPeriods: [],
            annualized: []
          },
        }
      },

      computedArrays: {
        propertyValue: [],
        grossRentalIncome: [], // total rents less vaccancy
        propertyTax: [],
        insurance: [],
        repairs: [],
        water: [],
        sewer: [],
        miscExpenses: [],
        netOperatingExpenses: [],
        netOperatingIncome: [],
        cashFlow: [],
        depreciation: [],
        cashFlowIRS: [],
        resultingTaxWriteoff: [],
        valueOfRealEstateInvestment: [],
        valueOfRealEstateInvestmentIncludingWriteoffs: [],
        valueOfStockMarketInvestment: [],
        loanBalance: [],
        totalEquity: [],
        totalPrincipalPaid: [],
      },

      userViews: {
        defaultView: {

        }
      }
    }

    this.state = this.initialState;
  };

  dotProduct = (arrays, callback) => {
    var combinedArray = [];
    for (var i = 0; i <= this.state.model.yearsOutComputation; i++){
      combinedArray[i] = 0;
      for (var j = 0; j < arrays.length; j++){
        combinedArray[i] += arrays[j][i];
      }
    }
    callback(null, combinedArray);
  }

  computeAllCompoundInterestArrays = () => {

    // var computeFromInitial = (initialValue, selectedArray) => {
    //   var initialArray = this.state.computedArrays;
    //   initialArray[selectedArray] = [];
    //
    //   for(var i = 0; i <= this.state.model.yearsOutComputation; i++){
    //     initialArray[selectedArray][i] = this.state.computedArrays.propertyValue[0] * (Math.pow(Math.E, (this.state.model.appreciationYRG * .01) * i));
    //   }
    //
    //   this.setState({
    //     computedArrays: initialArray
    //   });
    //
    // };
    //
    // this.associateStartingPoints = {
    //   appreciatedValue: 'purchasePrice'
    // };
    //
    // Object.keys(this.associateStartingPoints).forEach((item) => {
    //   var start = this.associateStartingPoints[item];
    //   computeFromInitial(this.state.model[start], item);
    // });
    // console.log('appreciatedValue: ', this.state.computedArrays.appreciatedValue);

    //Compute grossRentalIncome and put it at the start of the grossRentalIncome array

    var generateGrowthArray = (startingPoint, callback) => {
      var returnArray = [];
      for(var i = 0; i <= this.state.model.yearsOutComputation; i++){
        returnArray[i] = startingPoint * (Math.pow(Math.E, (this.state.model.appreciationYRG * .01) * i));
      }
      callback(null, returnArray)
    };

    //need to a list of starting points, turn them into an array, combine all arrays into one "expenses" array, store as netOperatingExpenses
    var expenses = this.state.model.expenses;
    var listOfArrays = [];

    Object.keys(expenses).forEach((item) => {
      generateGrowthArray(expenses[item].amount, (error, resultingArray) => {
        expenses[item].growthArray = resultingArray;
        listOfArrays.push(resultingArray)
      });
    });
    // combine all arrays into one "expenses" array
    // grab all expenses arrays
    this.dotProduct(listOfArrays, function(error, resultingArray) {
      // console.log('resultingArray: ', resultingArray);
      //TODO: Put in the temporary computedArray storage object
    });

    //now, compute everything starting at the first element of the array
  };

  updateModelState = (e, modelStateParameter) => {
    var valuesStoredInArrayZero = {
      'purchasePrice': 'propertyValue'
    };
    const parameter = e.target.name;
    const value = e.target.value;

    // TODO: fix direct state access
    if(Object.keys(valuesStoredInArrayZero).includes(parameter)){
      this.state.computedArrays[valuesStoredInArrayZero[parameter]][0] = value;
    };


    const initStateModel = this.state.model;
    initStateModel[parameter] = value;

    this.setState({
      model: initStateModel
    }, function(){
      this.computeEverything();
    });
  };

  generateAllInputs = () =>{
    var visualObjects = [];
    var that = this;
    var count = 0;

    Object.keys(this.state.model).forEach(function(item){
      if(typeof(that.state.model[item]) !== 'object'){
        visualObjects.push(
          <div key={count}>
            <label>{item}: </label>
            <input className="form-control" type="number" name={item} onChange={that.updateModelState} />
          </div>
        );
        count++;
      }
    });

    var initialState = this.state.view;
    initialState.allInputs = visualObjects;
    this.setState({
      view: initialState
    });


  }

  showAllVariables = () => {
    var visualObjects = [];
    var that = this;
    var count = 0;

    Object.keys(this.state.model).forEach(function(item){
      if(typeof(that.state.model[item]) !== 'object'){
        visualObjects.push(<p key={count}> {item}: {that.state.model[item]} </p>);
        count++;
      }
    });

    var initialState = this.state.view;
    initialState.allVariables = visualObjects;
    this.setState({
      view: initialState
    });

  };

  //TODO
  generateAllTables = () => {
    var visualObjects = [];
    var that = this;
    var count = 0;

    // https://menubar.io/reactjs-tables
    // https://dev.to/abdulbasit313/an-easy-way-to-create-a-customize-dynamic-table-in-react-js-3igg

    var testJSX = <h1>test</h1>;
    visualObjects.push(testJSX);

    // visualObjects.push(<table className="table table-sm table-striped table-bordered projection-table table-hover">);
    // visualObjects.push(<tr>);
    // visualObjects.push(<tbody>);
    //
    // Object.keys(this.state.computedArrays).forEach(function(item){
    //   if (typeof(item) !== 'object'){
    //     visualObjects.push(<thead>{item}</thead>)
    //   }
    // });
    // visualObjects.push(</tbody>);
    // visualObjects.push(</tr>);
    // visualObjects.push(</table>);

    var initialState = this.state.view;
    initialState.table = visualObjects;

    this.setState({
      view: initialState,
    })

  };

  computeTable = () => {
  }

  computeAllInitialValues = () => {
    var initialComputed = this.state.computed;

    // compute expenses
    initialComputed.netOperatingExpenses = 0;
    Object.keys(this.state.model.expenses).forEach((item) => {
      initialComputed.netOperatingExpenses += this.state.model.expenses[item].amount;
    });

    if (isNaN(this.state.computedArrays.propertyValue[0] / initialComputed.grossRentalIncome) || this.state.computedArrays.propertyValue[0] / initialComputed.grossRentalIncome === 'Infinity'){
      initialComputed.grm = null;
    }else{
      initialComputed.grm = this.state.computedArrays.propertyValue[0] / initialComputed.grossRentalIncome;
    }

    //cap rate
    initialComputed.cap = (initialComputed.netOperatingIncome / this.state.computedArrays.propertyValue[0]) * 100;

    //down payment
    initialComputed.downPaymentAmount = this.state.computedArrays.propertyValue[0] * (this.state.model.interestRatePct * .01);

    initialComputed.loanValue = this.state.computedArrays.propertyValue[0] - initialComputed.downPaymentAmount;

    initialComputed.closingCosts = this.state.computedArrays.propertyValue[0] * (this.state.model.closingCostsPct * .01);
    // TODO: initialComputed.loanEndingDate
  }

  componentDidMount = function(){
    this.computeEverything();
  };

  computeEverything = function(){
    this.showAllVariables();
    this.generateAllInputs();
    this.generateAllTables();
    this.computeAllInitialValues();
    this.computeAllCompoundInterestArrays();
    this.generateUnits();
  };



  handleEditUnit = (event) => {
    console.log('name, value: ', event.target.name, event.target.value);
    //TODO: Handle edit monthly revenue
    var id = event.target.name,
        workingModel = this.state.model;

    workingModel.unitsPerMonth[id].name = event.target.value;

    this.setState({
      model: workingModel
    }, ()=> {
       this.generateUnits();
    });

    // workingModel.unitsPerMonth[id].amount = event.target.value;
    //
    // newUnits[event.target.value] = event.target.name;
    //
    // var workingModel = this.state.model;
    // workingModel.unitsPerMonth = newUnits;
    //
    // this.setState({
    //   model: workingModel
    // });
    //
    // this.generateUnits();
  }

  handleAddUnit = () => {
    var initModel = this.state.model,
        numUnits = Object.keys(this.state.model.unitsPerMonth).length;

    // check if first is empty
    if(typeof(initModel.unitsPerMonth[0]) === 'undefined'){
      initModel.unitsPerMonth[0] = {};
    }

    initModel.unitsPerMonth[numUnits] = {};
    initModel.unitsPerMonth[numUnits].name = 'Unit ' + Object.keys(this.state.model.unitsPerMonth).length.toString();
    initModel.unitsPerMonth[numUnits].amount = 0;

    this.setState({
      model: initModel
    });

  }

  generateUnits = () => {
    var unitRowsVisual = [],
        workingView = this.state.view,
        count = Object.keys(this.state.model.unitsPerMonth).length;

    Object.keys(this.state.model.unitsPerMonth).forEach((id) => {
      if(typeof(this.state.model.unitsPerMonth[id].name) !== 'undefined'){
        unitRowsVisual.push(
                      <tr key={count}>
                        <td><p>{this.state.model.unitsPerMonth[id].name}</p><input type="text" value={this.state.model.unitsPerMonth[id].name} name={id} onChange ={this.handleEditUnit} /> </td>
                        <td onClick={this.handleEditUnit} className='monthly-revenue-td' >${this.state.model.unitsPerMonth[id].amount.toLocaleString('en-us')}</td>
                        <td>${(this.state.model.unitsPerMonth[id].amount * 12).toLocaleString('en-us')}</td>
                      </tr>);
                      count++;
      }
    });
    workingView.unitRows = unitRowsVisual;
    this.setState({
      view: workingView
    });
  }

  render(){
    var ShowUnits = () => {
      return(
        <React.Fragment>
          <h4>Units</h4>
          <table>
          </table>
          <table>
            <tbody>
              <tr>
                <th>Unit Name</th>
                <th>Monthly Revenue</th>
                <th>Yearly Revenue</th>
              </tr>
              {this.state.view.unitRows}
            </tbody>
          </table>
          <button onClick={this.handleAddUnit}>Add Unit</button>
        </React.Fragment>
      )
    }

    var GenerateInputTable = function(){
      return(
      <React.Fragment>
            <ShowUnits />
      </React.Fragment>
      );
    }

    return(
      <React.Fragment>
        <div className = "input-group">
          {this.state.view.allInputs}
          <label>purchasePrice</label>
          <input className="form-control" type="number" name="purchasePrice" onChange={this.updateModelState} />
        </div>
        {this.state.view.allVariables}
        <GenerateInputTable />
      </React.Fragment>
    )
  }

}

export default App;
